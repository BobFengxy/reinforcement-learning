#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Thu Jan 10 10:05:51 2019

@author: fengxingyu
"""

import numpy as np
import pandas as pd
import tensorflow as tf

class RLwork:
    def __int__(self, n_actions, n_features, learning_rate = 0.01, 
                #reward_decay = 0.95):
                ):
        self.n_actions = n_actions
        self.n_features = n_features
        self.lr = learning_rate
    def _build_net(self):
        with tf.name_scope('inputs') as scope:
            self.tf_obs = tf.placeholder(tf.float32, [None, self.n_features], name="observations")
            self.tf_acts = tf.placeholder(tf.int32, [None, ], name="actions_num")
            self.tf_vt = tf.placeholder(tf.float32, [None, ], name="actions_value")

        # ------------------ build Sa_net ------------------
        # 输入未填写
        self.s_a = tf.placeholder(tf.float32, [None, self.n_features], name='s_a')  
        # 第一个卷积层
        with tf.name_scope('conv1') as scope:
            kernel = tf.Variable(tf.truncated_normal([, , , ], dtype = tf,float32,stddev = 1e-1),name = 'weights')
            conv = tf.nn.conv2d(s_a, kernal, [, , , ], padding = 'SAME' )
            biases = tf.Variable(tf.constant(0.0, shape = [], dtype = tf.float32),trainable = True, name = 'biases')
            bias = tf.nn.bias_add(conv, biases, name = 'bias')
            conv1 = tf.nn.relu(bias, name = scope) 
            parameters += [kernel, biases]
        
        # 添加pool， lrn层？
        # lrn1 = tf.nn.lrn()
        pool1 = tf.nn.max_pool(conv1, ksize = [, , , ], strides = [, , , ], padding = 'VALID', name = 'pool1')
        
        # 第二个卷积层
        with tf.name_scope('conv2') as scope:
            kernel = tf.Variable(tf.truncated_normal([, , , ], dtype = tf,float32,stddev = 1e-1),name = 'weights')
            conv = tf.nn.conv2d(s_a, kernal, [, , , ], padding = 'SAME' )
            biases = tf.Variable(tf.constant(0.0, shape = [], dtype = tf.float32),trainable = True, name = 'biases')
            bias = tf.nn.bias_add(conv, biases, name = 'bias')
            conv2 = tf.nn.relu(bias, name = scope) 
            parameters += [kernel, biases]
            
        # pool2
        #lrn2 = tf.nn.lrn()
        pool2 = tf.nn.max_pool(conv2, ksize = [, , , ], strides = [, , , ], padding = 'VALID', name = 'pool2')
        # 第三个卷积层
        with tf.name_scope('conv3') as scope:
            kernel = tf.Variable(tf.truncated_normal([, , , ], dtype = tf,float32,stddev = 1e-1),name = 'weights')
            conv = tf.nn.conv2d(s_a, kernal, [, , , ], padding = 'SAME' )
            biases = tf.Variable(tf.constant(0.0, shape = [], dtype = tf.float32),trainable = True, name = 'biases')
            bias = tf.nn.bias_add(conv, biases, name = 'bias')
            conv3 = tf.nn.relu(bias, name = scope) 
            parameters += [kernel, biases]
            
        # pool3
        # lrn3 = tf.nn.lrn()
        pool3 = tf.nn.max_pool(conv2, ksize = [, , , ], strides = [, , , ], padding = 'VALID', name = 'pool3')
        
        # flattened
        with tf.name_scope('flattened6') as scope:
            flattened = tf.reshape(pool3, shape=[-1, ])
        
        # fc1
        '''
        with tf.name_scope('fc1') as acope:
            weights = tf.Variable(tf.truncated_normal([ , ], dtype = tf.float32, stddev = 1e-1, name = 'weights'))
            biases = tf.Variable(tf.constant(0.0, shape = [ ], dtype = tf.float32), trainable = True, name = 'biases')
            parameters += [weights, biases]
            fc_layer_parameters.append(weights)
            fc_layer_parameters.append(biases)
            bias = tf.nn.xw_plus_b(flattened, weights, biases)
            fc1 = tf.nn.relu(bias)
        '''
        # 第二种fc的写法
        layer = tf.layers.dense(inputs = pool3, units = ,activation = tf.nn.relu,
                                            kernel_initializer=tf.random_normal_initializer(mean=0, stddev=1e-1),
                                            bias_initializer=tf.constant_initializer(0.0),
                                            name = 'fc1'
            )
        
        # ------------------ build Sb_net ------------------
        self.s_b = tf.placeholder(tf.float32, [None, ], name='s_b') 
        
        # fc2
        with tf.name_scope('fc2') as scope:
            weights = tf.Variable(tf.truncated_normal([ , ], dtype = tf.float32, stddev = 1e-1, name = 'weights'))
            biases = tf.Variable(tf.constant(0.0, shape = [ ], dtype = tf.float32), trainable = True, name = 'biases')
            parameters += [weights, biases]
            fc_layer_parameters.append(weights)
            fc_layer_parameters.append(biases)
            bias = tf.nn.xw_plus_b(s_b, weights, biases)
            fc2 = tf.nn.relu(bias)
            
        # concat 表示直接连接fc1 fc2
        tf.concat(0, fc1, fc2, name = 'concat')
        
        # fc3
        with tf.name_scope('fc3') as acope:
            weights = tf.Variable(tf.truncated_normal([ ,self.n_actions], dtype = tf.float32, stddev = 1e-1, name = 'weights'))
            biases = tf.Variable(tf.constant(0.0, shape = [ ], dtype = tf.float32), trainable = True, name = 'biases')
            parameters += [weights, biases]
            fc_layer_parameters.append(weights)
            fc_layer_parameters.append(biases)
            bias = tf.nn.xw_plus_b(concat, weights, biases)
            fc3 = tf.nn.relu(bias)
            
        
        self.all_act_prob = tf.nn.softmax(fc3, name='act_prob')
        
        with tf.name_scope('loss') as scope:
            neg_log_prob = tf.nn.sparse_softmax_cross_entropy_with_logits(logits=fc3, labels=self.tf_acts)
            # 奖励影响loss self.tf_vt是奖励
            loss = tf.reduce_mean(neg_log_prob * self.tf_vt)
        
        with tf.name_scope('train') as scope:
            self.train_op = tf.train.AdamOptimizer(self.lr).minimize(loss)
            

            
            
    def choose_action(self, observation):
        
    def store_transition(self, s, a, r):
        
    def learn(self):
        
    def _discount_and_norm_rewards(self):
